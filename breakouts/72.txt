
# class TreeNode:
#     def __init__(self, val, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

# #print tree 
# def print_tree(root):
#     if not root:
#         return 
#     print_tree(root.right)
#     print(root.val)
#     print_tree(root.left)

# #Problem 1
# Tree = TreeNode(10, TreeNode(4), TreeNode(10))
# # print_tree(Tree)
# Tree2 = TreeNode(5, TreeNode(3), TreeNode(1))


# #Problem 2
# def check_tree_2(root):
#     if not root:
#         return None 

#     sum_of_children = root.right.val + root.left.val
    
#     if sum_of_children == root.val:
#         return True
#     else:
#         return False

# # Example Input Tree #1: 
# #   10
# #  /  \
# # 4    6
# # Input: root = 10
# # Expected Output: True

# # Example Input Tree #2: 
# #   5
# #  / \
# # 3   1
# # Input: root = 5
# # Expected Output: False

# # Problem 3
# def check_tree_3(root):
#     if not root:
#         return None
    
#     sum_of_children = 0
    
#     if root.left.val:
#         sum_of_children += root.left.val
#     if root.right.val:
#         sum_of_children += root.right.val
    
#     if sum_of_children == root.val:
#         return True 
#     else:
#         return False

# #Problem 4
# def left_most(root):
#     if not root.left:
#         return root.val
#     if root.left:
#         return left_most(root.left)

# Print(left_most(Tree))

# #Problem 5
# def left_most(root):
#     if root is None:
#         return None
#     if root.left is None:
#         return root.val
#     return left_most(root.left)

# # Problem 6

# # result = []
# def inorder_traversal(root, result = []):
#     if not root:
#         return result 

#     inorder_traversal(root.left,result)
#     result.append(root.val)
#     inorder_traversal(root.right,result)


# some = TreeNode(1, left = None, right = TreeNode(2, left = Node(3), right = None))
# # # Example Input Tree #1: 
# #      1
# #       \
# #        2
# #       / 
# #      3    

# # Problem 7: Binary Tree Size
# # Given the root of a binary tree, write a function size() that returns the number of nodes in the binary tree.

# # Evaluate the time complexity of your function.

# def size(root):
# 	if not root:
#         return 0


#     return size(root.left) + size(root.right)  
#     return 1
    
# def find(root, value):
#     pass


def count_letters(s: str)-> str | None:
    freqs = {}
    for char in s:
        freqs[char] = freqs.get(char,0) + 1
        if freqs[char] == 2:
            return char
    return None

print("Expected: c - ", count_letters("abcc"))